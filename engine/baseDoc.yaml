---
Name: LeftWalk
Class: baseActions.Move
Input: [0: ['left': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftWalk, LeftMoonwalk, LeftStop, LeftJump, LeftGroundAttack, LeftSpecial]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['maxGroundSpeed'],-1)
                actor.accel(actor.var['staticGrip'])
---
Name: RightWalk
Class: baseActions.Move
Input: [0: ['right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightWalk, RightMoonwalk, RightStop, RightJump, RightGroundAttack, RightSpecial]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['maxGroundSpeed'],1)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftMoonwalk
Class: baseActions.Move
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftWalk, LeftMoonwalk, LeftStop, LeftJump, RightGroundAttack, RightSpecial]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                if self.direction == actor.direction:
                    actor.flip()
                actor.setPreferredSpeed(actor.var['maxGroundSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: RightMoonwalk
Class: baseActions.Move
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightWalk, RightMoonwalk, RightStop, RightJump, LeftGroundAttack, LeftSpecial]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                if self.direction == actor.direction:
                    actor.flip()
                actor.setPreferredSpeed(actor.var['maxGroundSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftDash
Class: baseActions.Dash
Input: [0: ['left': 1]]
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftDash, LeftMoondash, LeftDashCommit, LeftStop, LeftJump, LeftGroundAttack, LeftSpecial]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],-1)
                actor.accel(actor.var['staticGrip'])
---
Name: RightDash
Class: baseActions.Dash
Input: [0: ['right': 1]]
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightDash, RightMoondash, RightDashCommit, RightStop, RightJump, RightGroundAttack, RightSpecial]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],1)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftMoondash
Class: baseActions.Dash
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftMoondash, LeftStop, LeftMoondashCommit, LeftJump, RightGroundAttack, RightSpecial]
            Priority: -2
            Type: [0, 0]
            Precedence: 0
            Connect: |
                if self.direction == actor.direction:
                    actor.flip()
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: RightMoondash
Class: baseActions.Dash
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightMoondash, RightStop, RightMoondashCommit, RightJump, LeftGroundAttack, LeftSpecial]
            Priority: -2
            Type: [0, 0]
            Precedence: 0
            Connect: |
                if self.direction == actor.direction:
                    actor.flip()
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftDashCommit
Class: baseActions.Dash
Input: [0: ['left': 1]]
Prerequisite: "self.frame == self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftRun, LeftStop, LeftJump, LeftGroundAttack, LeftSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],-1)
                actor.accel(actor.var['staticGrip'])
---
Name: RightDashCommit
Class: baseActions.Dash
Input: [0: ['right': 1]]
Prerequisite: "self.frame == self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightRun, RightStop, RightJump, RightGroundAttack, RightSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],1)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftMoondashCommit
Class: baseActions.Dash
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "self.frame == self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftMoonrun, LeftStop, LeftJump, RightGroundAttack, RightSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: RightMoondashCommit
Class: baseActions.Dash
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "self.frame == self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightMoonrun, RightStop, RightJump, LeftGroundAttack, LeftSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftRun
Class: baseActions.Run
Input: [0: ['left': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftRun, LeftStop, LeftJump, LeftGroundAttack, LeftSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],-1)
                actor.accel(actor.var['staticGrip'])
---
Name: RightRun
Class: baseActions.Run
Input: [0: ['right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightRun, RightStop, RightJump, RightGroundAttack, RightSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],1)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftMoonrun
Class: baseActions.Run
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftMoonrun, LeftStop, LeftJump, RightGroundAttack, RightSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: RightMoonrun
Class: baseActions.Run
Input: [0: ['left': 1, 'right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightMoonrun, RightStop, RightJump, LeftGroundAttack, LeftSpecial]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['runSpeed'],self.direction)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftPivot
Class: baseActions.Pivot
Input: [0: ['right': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 5
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftWalk, RightWalk, Idle]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
---
Name: RightPivot
Class: baseActions.Pivot
Input: [0: ['left': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 5
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftWalk, RightWalk, Idle]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
---
Name: LeftStop
Class: baseActions.Stop
Input: []
Prerequisite: "self.frame < 8"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftDash, LeftPivot, StopCommit]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
---
Name: RightStop
Class: baseActions.Stop
Input: []
Prerequisite: "and self.frame < 8"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [40, 40, 32, 32]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightDash, RightPivot, StopCommit]
            Priority: -1
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
---
Name: StopCommit
Class: baseActions.Stop
Input: []
Prerequisite: "self.frame >= 8"
Pattern:
    - Start: 0
      End: self.lastFrame-8
      Hitbox: [34, 34, 32, 32]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [Idle]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
---
Name: Idle
Class: baseActions.NeutralAction
Input: []
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [32, 32, 32, 32]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [Idle, LeftWalk, RightWalk, LeftCrouch, RightCrouch, Attack, Special, LeftJump, RightJump, LeftShield, RightShield]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                pass
---
Name: LeftCrouch
Class: baseActions.Crouch
Input: [0: ['down': 1]]
Prerequisite: "actor.direction==-1"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftCrouch, LeftLeftCrawl, LeftRightCrawl, CrouchGetup, Attack, Special, LeftJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
                actor.accel(actor.var['staticGrip'])
---
Name: RightCrouch
Class: baseActions.Crouch
Input: [0: ['down': 1]]
Prerequisite: "actor.direction==1"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightCrouch, RightLeftCrawl, RightRightCrawl, CrouchGetup, Attack, Special, RightJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
                actor.accel(actor.var['staticGrip'])
---
Name: LeftLeftCrawl
Class: baseActions.Crouch
Input: [0: ['down': 1, 'left': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftCrouch, LeftLeftCrawl, LeftRightCrawl, CrouchGetup, Attack, Special, LeftJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['crawlSpeed'], actor.getFacingDirection())
                actor.accel(actor.var['staticGrip'])
---
Name: LeftRightCrawl
Class: baseActions.Crouch
Input: [0, ['down': 1, 'right': 1]]
Prerequisite: "True"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [LeftCrouch, LeftLeftCrawl, LeftRightCrawl, CrouchGetup, Attack, Special, LeftJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(-actor.var['crawlSpeed'], actor.getFacingDirection())
                actor.accel(actor.var['staticGrip'])
---
Name: RightLeftCrawl
Class: baseActions.Crouch
Input: [0: ['down': 1, 'left': 1]]
Prerequisite: "True"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightCrouch, RightLeftCrawl, RightRightCrawl, CrouchGetup, Attack, Special, RightJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(-actor.var['crawlSpeed'], actor.getFacingDirection())
                actor.accel(actor.var['staticGrip'])
---
Name: RightRightCrawl
Class: baseActions.Crouch
Input: [0, ['down': 1, 'right': 1]]
Prerequisite: "True"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [46, 46, 10, 10]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [RightCrouch, RightLeftCrawl, RightRightCrawl, CrouchGetup, Attack, Special, RightJump]
            Priority: 0
            Type: [0, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(actor.var['crawlSpeed'], actor.getFacingDirection())
                actor.accel(actor.var['staticGrip'])
---
Name: CrouchGetup
Class: baseActions.CrouchGetup
Input: []
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [32, 32, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000,-10000,20000,20000)
            Follow: [CrouchGetup, CrouchGetupCommit, PlatformDrop]
            Priority: -2
            Type: [0, 0]
            Precedence: 0
            Connect: |
                pass
---
Name: CrouchGetupCommit
Class: baseActions.CrouchGetup
Input: []
Prerequisite: "self.frame == self.lastFrame"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [32, 32, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [Idle]
            Priority: -3
            Type: [0, 0]
            Precedence: 0
            Connect: |
                pass
---
Name: Grabbing
Class: baseActions.Grabbing
Input: []
Prerequisite: "hasattr(actor, grabbing) and hasattr(actor.grabbing, grabbedBy) and actor.grabbing.grabbedBy == actor"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [32, 32, 32, 32]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [Release, Pummel, Throw]
            Priority: 12
            Type: [0, 5]
            Precedence: 0
            Connect: |
                pass
---
Name: Hitstun
Class: baseActions.HitStun
Input: []
Prerequisite: "self.frame < self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 16
      Follow: 
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [Hitstun, TryTech, Tumble, SkidTrip, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -14
            Type: [-5, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
---
Name: Tumble
Class: baseActions.HitStun
Input: []
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.setPreferredSpeed(0)
---
Name: TumbleLeft
Class: baseActions.HitStun
Input: [0: ['left': 1]]
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.setPreferredSpeed(-actor.var['maxAirSpeed'])
---
Name: TumbleRight
Class: baseActions.HitStun
Input: [0: ['right': 1]]
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.setPreferredSpeed(actor.var['maxAirSpeed'])
---
Name: TumbleDown
Class: baseActions.HitStun
Input: [0: ['down': 1]]
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.calc_grav()
                actor.setPreferredSpeed(0)
---
Name: TumbleDownLeft
Class: baseActions.HitStun
Input: [0: ['down': 1, 'left': 1]]
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.calc_grav()
                actor.setPreferredSpeed(-actor.var['maxAirSpeed'])
---
Name: TumbleDownRight
Class: baseActions.HitStun
Input: [0: ['down': 1, 'right': 1]]
Prerequisite: "self.frame >= self.lastFrame and not (actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed'])"
Pattern:
    - Start: 0
      End: 0
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TechDodge, AirAttack, AirSpecial, AirJump, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbeDownRight]
            Priority: -2
            Type: [-1, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.calc_grav()
                actor.setPreferredSpeed(-actor.var['maxAirSpeed'])
---
Name: TryTech
Class: baseActions.TryTech
Input: ['shield']
Prerequisite: "self.frame < self.lastFrame"
Pattern:
    - Start: 0
      End: 19
      Hitbox: [23, 23, 46, 46]
      LandingLag: 0
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TryTech, HitStun, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbleDownRight]
            Priority: -14
            Type: [-5, 0]
            Precedence: 0
            Connect: |
                actor.setPreferredSpeed(0)
    - Start: 20
      End: 40
      Hitbox: [23, 23, 46, 46]
      LandingLag: -14
      Follow:
          - Bounds: (-10000, -10000, 20000, 20000)
            Follow: [TryTech, HitStun, Tumble, TumbleLeft, TumbleRight, TumbleDown, TumbleDownLeft, TumbleDownRight]
            Priority: -14
            Type: [-5, 0]
            Precedence: 0
            Connect: |
                if actor.grounded and self.frame > 2:
                    if self.frame >= self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2: #Hard landing during tumble
                        actor.change_y = -0.4*actor.change_y
                    elif self.frame < self.lastFrame and actor.change_y >= actor.var['maxFallSpeed']/2:
                        actor.change_y = -0.8*actor.change_y #Hard landing during hitstun
                    elif abs(actor.change_x) > actor.var['runSpeed']: #Skid trip
                        pass
                    elif self.frame >= self.lastFrame and actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during tumble
                        pass
                    elif self.frame >= self.lastFrame: #Firm landing during tumble
                        pass
                    elif actor.change_y < actor.var['maxFallSpeed']/2: #Soft landing during hitstun
                        pass
                    else: #Firm landing during hitstun
                        actor.change_y = -0.4*actor.change_y
                actor.setPreferredSpeed(0)
---
Name: SkidTrip
Class: baseActions.Trip
Input: []
Prerequisite: "actor.grounded and self.frame > 2 and abs(actor.change_x) > actor.var['runSpeed']"
Pattern: 
    - Start: 0
      End: 0
      Hitbox: [-40, 40, -20, 20]
      LandingLag: 0
      Follow: 
          - Bounds: (-10000, -10000, 10000, 10000)
            Follow: [Trip, GetupAttack, ForwardRoll, BackwardRoll, SpotDodge]
            Priority: -8
            Type: [-2, -2]
            Precedence: 0
            Connect: |
                


...



























